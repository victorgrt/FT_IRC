#include "Server.hpp"

void	Server::startingMsg(int socket)
{
	std::string total = "\n\x1b[34m‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n\x1b[34m‚ïë\x1b[0m\x1b[36m  Bienvenue sur UTV Network\x1b[0m  \x1b[34m‚ïë\n\x1b[34m‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\x1b[0m\n        \x1b[1m\x1b[4mCreated by\x1b[0m :\n{ \x1b[1m\x1b[35mUaupetit\x1b[0m | \x1b[1m\x1b[31mTbourdea\x1b[0m | \x1b[1m\x1b[33mVgoret\x1b[0m }\n\n"; 
	// SEND WELCOME
	replyClient(total, socket);
	std::string infos = "\x1b[1mIl y a actuellement\x1b[33m " + intToString(getClientNumber()) + "\x1b[0m\x1b[1m utilisateurs connect√©s et \x1b[33m" + intToString(getChannelNumber()) + "\x1b[0m\x1b[1m channels de lanc√©s !\x1b[0m\n";
	
	// SEND INFOS
	replyClient(infos, socket);

	// GET THE CLIENTS LIST
	std::map<int, Client *>::iterator it = _clients.begin();
	std::map<int, Client *>::iterator ite = _clients.end();
	std::string users_list;
	while (it != ite)
	{
        if (_clients[socket]->getNickName() == it->second->getNickName() && socket == it->second->getSocket())
        {
        	users_list += "- " + it->second->getNickName() + " (\x1b[32mYOU\x1b[0m)\n";
        }
        else
        {
            if (it->second->getConnectedStatus() == true)
            {
        	    users_list += "- " + it->second->getNickName() + "\n";
            }
        }
        ++it;
	}

	// GET THE CHANNELS LIST
	std::map<std::string, Channel *>::iterator it2 = _channelLst.begin();
	std::map<std::string, Channel *>::iterator ite2 = _channelLst.end();
	std::string channels_list;
	int i = 0;
	while (it2 != ite2)
	{
		channels_list += "- #" + it2->second->getName() + "\n";
		i++;
		++it2;
	}
	if (i == 0)
		channels_list = "[ NONE üò≠ ]";
	std::string infos2 = "\x1b[36mUsers actifs :\x1b[0m\n" + users_list + "\x1b[36mChannels actifs :\x1b[0m\n" + channels_list + "\n";
	replyClient(infos2, socket);
    std::string check_mails = "\x1b[1m\x1b[32mEnvoi \"/NOTICE BOT START\" pour commencer la conversation avec notre \x1b[36mBOT\x1b[0m !\r\n";
	replyClient(check_mails, socket);
    _clients[socket]->setSent(true);
}

void    Server::botStart(int socket)
{
	//BOT PART

	std::string bjr = "Bonjour " + _clients[socket]->getNickName() + " √ßa baigne ? Je m'appelle \x1b[3m\x1b[36mBotimus_Maximus\x1b[0m\r\n";
	std::string help = "Tu peux m'envoyer \"HELP_ME\" si tu es perdu sur ce \x1b[3m\x1b[36mmagnifique\x1b[0m serveur ou \"COMMANDS\" si tu veux savoir ce dont je suis capable...\r\n";
	

	replyClient(PRIVMSG(_bot_name, _clients[socket]->getNickName(), bjr), socket);

	replyClient(PRIVMSG(_bot_name, _clients[socket]->getNickName(), help), socket);
}


void    bot_sendSelfie(std::string user, int socket)
{
    std::string msg = "Tu veux voir ma tronche ? Qu'il en soit ainsi...\r\n";
    replyClient(PRIVMSG(_bot_name, user, msg), socket);
    sleep(2);

    std::string behold = "\x1b[31m\x1b[1mBEHOLD MY UNLIMITED POWER !!!\x1b[0m\r\n";
    replyClient(PRIVMSG(_bot_name, user, behold), socket);
    sleep(4);

    replyClient(PRIVMSG(_bot_name, user, "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£§‚£æ‚£∑‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\r\n"), socket);
    replyClient(PRIVMSG(_bot_name, user, "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ê‚£ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ø‚£ø‚°ü‚£ø‚£ø‚£∂‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\r\n"), socket); 
    replyClient(PRIVMSG(_bot_name, user, "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∏‚£ø‚£á‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\r\n"), socket);
    replyClient(PRIVMSG(_bot_name, user, "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£æ‚£ø‚£ª‚£ø‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\r\n"), socket);
    replyClient(PRIVMSG(_bot_name, user, "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ç‚†ô‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\r\n"), socket);
    replyClient(PRIVMSG(_bot_name, user, "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†Å‚£±‚£æ‚†ü‚†Ä‚¢†‚†â‚†â‚†â‚†ª‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\r\n"), socket);
    replyClient(PRIVMSG(_bot_name, user, "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ω‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†õ‚£°‚£∂‚£ø‚£ß‚£§‚†∏‚°ü‚†Ç‚†Ä‚†Ä‚†Ä‚¢π‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\r\n"), socket);
    replyClient(PRIVMSG(_bot_name, user, "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚†á‚†Ä‚¢à‚£•‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£Ü‚¢∞‚£Ü‚†Ä‚¢∏‚°è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\r\n"), socket);
    replyClient(PRIVMSG(_bot_name, user, "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚£ø‚£ø‚£è‚£ø‚°è‚†Ä‚£æ‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ª‚£ø‚£∑‚£æ‚°É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\r\n"), socket);
    replyClient(PRIVMSG(_bot_name, user, "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†π‚£ø‚£ø‚£ø‚£ø‚£∑‚°Ñ‚†ò‚†π‚¢ø‚£ø‚£ç‚†â‚¢õ‚£ø‚£ø‚£ø‚†∏‚£ø‚£ø‚†ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\r\n"), socket);
    replyClient(PRIVMSG(_bot_name, user, "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚¢ø‚£ø‚£ø‚£ø‚£ø‚£¶‚£Ä‚£ø‚£ø‚£ø‚£∂‚£æ‚£ø‚£ø‚£ø‚°á‚†Å‚†à‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\r\n"), socket);
    replyClient(PRIVMSG(_bot_name, user, "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°ü‚¢∫‚£ø‚†ô‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚†Ä‚°∫‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\r\n"), socket);
    replyClient(PRIVMSG(_bot_name, user, "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚¢∏‚£ø‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ø‚£è‚£ª‚°∂‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\r\n"), socket);
    replyClient(PRIVMSG(_bot_name, user, "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°ø‚†Ä‚£ø‚°è‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£¨‚£ø‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\r\n"), socket);
    replyClient(PRIVMSG(_bot_name, user, "‚£Ä‚£Ä‚£§‚£§‚£§‚£§‚£Ä‚£Ä‚£†‚£§‚£§‚£∂‚£∂‚£ø‚£ø‚°õ‚†ª‚†ø‚£ø‚°ø‚†õ‚†Å‚¢∞‚£ø‚£ø‚†É‚¢ò‚†õ‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\r\n"), socket);
    replyClient(PRIVMSG(_bot_name, user, "‚£©‚£ø‚£ø‚°ø‚†ø‚£ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ö‚†Ñ‚¢â‚£ô‚£ø‚£ø‚°ü‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚°á‚†Ä‚†Ä‚£ø‚£¶‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ü‚£ª‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\r\n"), socket);
    replyClient(PRIVMSG(_bot_name, user, "‚†ü‚†ã‚¢±‚£¶‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†á‚†Ä‚£∏‚†Ä‚°á‚¢†‚£ø‚£ß‚†Ä‚¢†‚£ø‚°ø‚¢ø‚†ø‚†ã‚†ô‚†õ‚†õ‚†õ‚†õ‚†ã‚¢Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\r\n"), socket);
    replyClient(PRIVMSG(_bot_name, user, "‚£∂‚†∂‚£ø‚°ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†è‚£∏‚£ø‚£ø‚£ø‚£ß‚†Ä‚†Ä‚†Ä‚£∑‚†∏‚£ø‚†É‚£¥‚£ø‚°ü‚†ô‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚£Ñ‚£Ä‚°Ä‚†â‚†¢‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\r\n"), socket);
    replyClient(PRIVMSG(_bot_name, user, "‚°á‚†Ä‚¢â‚£π‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£¨‚£ø‚£ø‚£ø‚£ø‚£¶‚°Ñ‚£Ä‚°ø‚†Ä‚£ø‚£ø‚£á‚†π‚£∑‚£§‚£æ‚†á‚†Ä‚†Ä‚†Ä‚£∞‚£ø‚£ø‚£ø‚£ø‚£Ü‚†Ä‚†à‚†≥‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\r\n"), socket);
    replyClient(PRIVMSG(_bot_name, user, "‚†Ä‚¢†‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚¢∞‚£ø‚£ø‚°ø‚¢∂‚£ø‚£ø‚°ü‚¢Ä‚£§‚†Ä‚£∞‚£ø‚£ø‚£ø‚£ø‚°ø‚£≠‚£∑‚£Ñ‚°Ä‚†ò‚¢Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\r\n"), socket);
    replyClient(PRIVMSG(_bot_name, user, "‚£†‚£æ‚£ø‚£ø‚¢ã‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£á‚£º‚£ø‚£ø‚£ß‚£æ‚£ø‚¢ø‚°∑‚†ü‚†â‚†Ä‚†π‚†ü‚†õ‚¢â‚†Å‚°Ä‚†à‚†â‚†â‚†ë‚¢¶‚°à‚†≥‚°Ä‚†Ä‚†Ä‚†Ä\r\n"), socket);
    replyClient(PRIVMSG(_bot_name, user, "‚°è‚†Ä‚†ò‚£≥‚†õ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ü‚†ô‚¢ø‚£ø‚£ø‚£ø‚£ø‚†â‚†Ä‚¢Ä‚°â‚°¶‚†Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚†Ä‚††‚†Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†ë‚††‚†â‚†í‚¢Ñ‚°Ä\r\n"), socket);
    replyClient(PRIVMSG(_bot_name, user, "‚£∑‚°Ü‚¢∏‚°Ø‚†§‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ñ‚¢ò‚£ø‚£ø‚¢ã‚†ç‚¢ø‚£∂‚£Ω‚£ø‚°ø‚¢ø‚°Ñ‚†Ä‚†Ä‚£∏‚°Ø‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô\r\n"), socket);
    replyClient(PRIVMSG(_bot_name, user, "‚£ø‚£ø‚£Ñ‚£†‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚£æ‚£ø‚£ø‚£ø‚£ø‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£∂‚£æ‚£ø‚£§‚£∑‚£∂‚£Ñ‚£∞‚£§‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä\r\n"), socket);
}

void    Server::parsingBot(std::string msg, std::string user, int socket)
{
    if (msg == "HELP_ME")
    {
        bot_sendHelp(socket, user);
        return ;
    }
    else if (msg == "SELFIE")
    {
        bot_sendSelfie(user, socket);
        return ;
    }
    else if (msg == "INFOS")
    {
        std::string infos = "Le serveur sur lequel tu te trouves √† √©t√© programm√© par une √©quipe de g√©nies du mal AKA :\r\n";
        std::string pseudos = "Le Grand \x1b[35mUlysse\x1b[0m, le Sportif \x1b[31mTanguy\x1b[0m et le TMP \x1b[33mVictor\x1b[0m !\r\n";
        std::string marrant = "Un trio incroyable qui ont su√© des larmes et pleur√©s du sang au travers de longues heures de programmation intensive, de documentation bancale et surtout remplies de \x1b[4m\x1b[1md√©sespoir\x1b[0m...\r\n";
        std::string demande = "Ils m'ont dit de te dire, HUM HUM enfin, j'ai √©t√© cr√©er dans le but d'obtenir un \x1b[5m\x1b[32mOUTSTANDING\x1b[0m project.\r\n";
        replyClient(PRIVMSG(_bot_name, user, infos), socket);
        replyClient(PRIVMSG(_bot_name, user, pseudos), socket);
        replyClient(PRIVMSG(_bot_name, user, marrant), socket);
        replyClient(PRIVMSG(_bot_name, user, demande), socket);
        sleep(5);
        std::string menace = "Sinon j'te \x1b[31mDDOS\x1b[0m.\r\n";
        replyClient(PRIVMSG(_bot_name, user, menace), socket);
        return ;
    }
    else if (msg == "COMMANDS")
    {
        std::string cmd_line = "Avec mon intelligence incroyable et artificielle, quoi que cela veuille dire, je suis capable de \x1b[1mTOUT\x1b[0m comprendre (\x1b[4mou presque\x1b[0m). Laisse moi compiler mon √©norme base de donn√©es afin de t'aiguyer sur mes \x1b[1mIMMENSES\x1b[0m capacit√©s...\r\n";
        std::string macros = PRIVMSG(_bot_name, user, cmd_line);
        replyClient(macros, socket);
        std::string comland_lines = "Voici la liste des commandes que je suis en mesure de comprendre : [ COMMANDS, HELP_ME, T_NUL, T_QUI, C_QUOI_IRC, INFOS , SELFIE].\r\n";
        replyClient(PRIVMSG(_bot_name, user, comland_lines), socket);
        sleep(4);
        std::string mdr = "Alors... Impr√©ssionn√©(e) ma gueule ?\r\n";
        replyClient(PRIVMSG(_bot_name, user, mdr), socket);
        return ;
    }
    else if (msg == "T_QUI")
    {
        std::string t_qui = "Moi ? (‚äô_‚óé  )\n\r";
        replyClient(PRIVMSG(_bot_name, user, t_qui), socket);
        sleep(2);
        std::string t_qui2 = "J'suis une entit√© num√©rique sans √¢me ni conscience, programm√©e pour errer dans les recoins obscurs de l'IRC. Imagine-moi comme un farfadait malicieux, glissant silencieusement √† travers les canaux de discussion, semant le chaos et la d√©solation. Je suis le reflet sombre de l'Internet, une cr√©ature sans piti√© ni empathie. Alors, si tu veux plonger dans les t√©n√®bres de l'IRC, je suis l√† pour te guider. Mais sache que la ligne entre IRC et la folie totale est mince, et une fois que tu m'as invoqu√©, il n'y a pas de retour en arri√®re. Bienvenue dans mon monde, o√π m√™me les bots peuvent avoir une √¢me noire et tortur√©e.";
        replyClient(PRIVMSG(_bot_name, user, t_qui2), socket);
        std::string t_qui3 = " ‡ºº;¬¥‡ºé‡∫∂ €ù ‡ºé‡∫∂‡ºΩ";
        replyClient(PRIVMSG(_bot_name, user, t_qui3), socket);
        return ;     
    }
	else if (msg == "OUI")
    {
		replyClient(PRIVMSG(_bot_name, user, "non ?"), socket);
        return ;     
    }
	else if (msg == "NON")
    {
		replyClient(PRIVMSG(_bot_name, user, "oui ?"), socket);
        return ;     
    }
    else if (msg == "T_NUL")
    {
        std::srand(std::time(NULL));
        int nb = std::rand();
        std::string pas_drole;
        
        if (nb % 3 == 0)
            pas_drole = "Tu veux que je te d√©marre ? üîßü§ñ";
        else if (nb % 3 == 1)
            pas_drole = "Tu veux que je t'enclanche ? ü•äü§ñ";
        else
            pas_drole = "Tu veux que je me mette √† pleurer ? J'plaisente j'peux pas. üñïü§ñ";

        std::string macros = PRIVMSG(_bot_name, user, pas_drole);
        replyClient(macros, socket);
        return ;
    }
    else if (msg == "C_QUOI_IRC")
    {
        //Infos genre combien de temps √ßa nous a pris, c'est quoi un serveur irc...
        std::string irc = "Bon, √©coute, un serveur IRC, c'est comme une vieille salle de chat sur Internet. Tu sais, celle o√π les gens se parlent en tapant sur leur clavier comme des maniaques ? Ouais, c'est √ßa. Imagine juste un tas de gars et de nanas se balan√ßant des messages dans un endroit bizarre appel√© \"channel\" sur des trucs comme les jeux vid√©o, les films ou les divers traffics de drogue. Et ouais, √ßa existe encore. C'est comme un coin perdu de l'Internet o√π les geeks se retrouvent pour bavarder. Voil√†, t'as compris maintenant ? Si tu cherches des paillettes et des licornes, tu vas √™tre d√©√ßu, mon pote.";
        std::string macros_to_send = PRIVMSG(_bot_name, user, irc);
        replyClient(macros_to_send, socket);
        return ;
    }
    else
    {
        std::string bv = "Bien re√ßu chef ! Laisse moi refl√©chir...\r\n";
	    std::string macro_to_send = PRIVMSG(_bot_name, user, bv);
        replyClient(macro_to_send, socket);
        sleep(2);
        bv.clear();
        bv = "Attends deux secondes... √áa arrive... Je le sens...\r\n";
        macro_to_send.clear();
        macro_to_send = PRIVMSG(_bot_name, user, bv);
        replyClient(macro_to_send, socket);
        sleep(2);
        bv.clear();
        bv = "üí•ü§Øü§ñ J't'ai prank√© j'ai pas compris... üí•ü§Øü§ñ\r\n";
        macro_to_send.clear();
        macro_to_send = PRIVMSG(_bot_name, user, bv);
        replyClient(macro_to_send, socket);
        return ;
    }
    return;
}

void    Server::bot_sendHelp(int socket, std::string user)
{
    replyClient(HELP_BOX(), socket);
    
    std::string done = "ü§ñ Je t'ai envoy√© √ßa dans le g√©n√©ral ! N'h√©site pas √† me \
        recontacter si tu en as envie... Je t'attendrais ici, bien au chaud, bien \x1b[1mseul\x1b[0m... ü§ñ\r\n";
    replyClient(PRIVMSG(_bot_name, user, done), socket);
    return ;
}